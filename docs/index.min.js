(function(l, i, v, e) { v = l.createElement(i); v.async = 1; v.src = '//' + (location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; e = l.getElementsByTagName(i)[0]; e.parentNode.insertBefore(v, e)})(document, 'script');
(function () {
'use strict';

function h(name, attributes) {
  var rest = [];
  var children = [];
  var length = arguments.length;

  while (length-- > 2) rest.push(arguments[length]);

  while (rest.length) {
    var node = rest.pop();
    if (node && node.pop) {
      for (length = node.length; length--; ) {
        rest.push(node[length]);
      }
    } else if (node != null && node !== true && node !== false) {
      children.push(node);
    }
  }

  return typeof name === "function"
    ? name(attributes || {}, children)
    : {
        nodeName: name,
        attributes: attributes || {},
        children: children,
        key: attributes && attributes.key
      }
}

function app(state, actions, view, container) {
  var map = [].map;
  var rootElement = (container && container.children[0]) || null;
  var oldNode = rootElement && recycleElement(rootElement);
  var lifecycle = [];
  var skipRender;
  var isRecycling = true;
  var globalState = clone(state);
  var wiredActions = wireStateToActions([], globalState, clone(actions));

  scheduleRender();

  return wiredActions

  function recycleElement(element) {
    return {
      nodeName: element.nodeName.toLowerCase(),
      attributes: {},
      children: map.call(element.childNodes, function(element) {
        return element.nodeType === 3 // Node.TEXT_NODE
          ? element.nodeValue
          : recycleElement(element)
      })
    }
  }

  function resolveNode(node) {
    return typeof node === "function"
      ? resolveNode(node(globalState, wiredActions))
      : node != null ? node : ""
  }

  function render() {
    skipRender = !skipRender;

    var node = resolveNode(view);

    if (container && !skipRender) {
      rootElement = patch(container, rootElement, oldNode, (oldNode = node));
    }

    isRecycling = false;

    while (lifecycle.length) lifecycle.pop()();
  }

  function scheduleRender() {
    if (!skipRender) {
      skipRender = true;
      setTimeout(render);
    }
  }

  function clone(target, source) {
    var out = {};

    for (var i in target) out[i] = target[i];
    for (var i in source) out[i] = source[i];

    return out
  }

  function set(path, value, source) {
    var target = {};
    if (path.length) {
      target[path[0]] =
        path.length > 1 ? set(path.slice(1), value, source[path[0]]) : value;
      return clone(source, target)
    }
    return value
  }

  function get(path, source) {
    var i = 0;
    while (i < path.length) {
      source = source[path[i++]];
    }
    return source
  }

  function wireStateToActions(path, state, actions) {
    for (var key in actions) {
      typeof actions[key] === "function"
        ? (function(key, action) {
            actions[key] = function(data) {
              var result = action(data);

              if (typeof result === "function") {
                result = result(get(path, globalState), actions);
              }

              if (
                result &&
                result !== (state = get(path, globalState)) &&
                !result.then // !isPromise
              ) {
                scheduleRender(
                  (globalState = set(path, clone(state, result), globalState))
                );
              }

              return result
            };
          })(key, actions[key])
        : wireStateToActions(
            path.concat(key),
            (state[key] = clone(state[key])),
            (actions[key] = clone(actions[key]))
          );
    }

    return actions
  }

  function getKey(node) {
    return node ? node.key : null
  }

  function eventListener(event) {
    return event.currentTarget.events[event.type](event)
  }

  function updateAttribute(element, name, value, oldValue, isSvg) {
    if (name === "key") {
    } else if (name === "style") {
      for (var i in clone(oldValue, value)) {
        var style = value == null || value[i] == null ? "" : value[i];
        if (i[0] === "-") {
          element[name].setProperty(i, style);
        } else {
          element[name][i] = style;
        }
      }
    } else {
      if (name[0] === "o" && name[1] === "n") {
        name = name.slice(2);

        if (element.events) {
          if (!oldValue) oldValue = element.events[name];
        } else {
          element.events = {};
        }

        element.events[name] = value;

        if (value) {
          if (!oldValue) {
            element.addEventListener(name, eventListener);
          }
        } else {
          element.removeEventListener(name, eventListener);
        }
      } else if (name in element && name !== "list" && !isSvg) {
        element[name] = value == null ? "" : value;
      } else if (value != null && value !== false) {
        element.setAttribute(name, value);
      }

      if (value == null || value === false) {
        element.removeAttribute(name);
      }
    }
  }

  function createElement(node, isSvg) {
    var element =
      typeof node === "string" || typeof node === "number"
        ? document.createTextNode(node)
        : (isSvg = isSvg || node.nodeName === "svg")
          ? document.createElementNS(
              "http://www.w3.org/2000/svg",
              node.nodeName
            )
          : document.createElement(node.nodeName);

    var attributes = node.attributes;
    if (attributes) {
      if (attributes.oncreate) {
        lifecycle.push(function() {
          attributes.oncreate(element);
        });
      }

      for (var i = 0; i < node.children.length; i++) {
        element.appendChild(
          createElement(
            (node.children[i] = resolveNode(node.children[i])),
            isSvg
          )
        );
      }

      for (var name in attributes) {
        updateAttribute(element, name, attributes[name], null, isSvg);
      }
    }

    return element
  }

  function updateElement(element, oldAttributes, attributes, isSvg) {
    for (var name in clone(oldAttributes, attributes)) {
      if (
        attributes[name] !==
        (name === "value" || name === "checked"
          ? element[name]
          : oldAttributes[name])
      ) {
        updateAttribute(
          element,
          name,
          attributes[name],
          oldAttributes[name],
          isSvg
        );
      }
    }

    var cb = isRecycling ? attributes.oncreate : attributes.onupdate;
    if (cb) {
      lifecycle.push(function() {
        cb(element, oldAttributes);
      });
    }
  }

  function removeChildren(element, node) {
    var attributes = node.attributes;
    if (attributes) {
      for (var i = 0; i < node.children.length; i++) {
        removeChildren(element.childNodes[i], node.children[i]);
      }

      if (attributes.ondestroy) {
        attributes.ondestroy(element);
      }
    }
    return element
  }

  function removeElement(parent, element, node) {
    function done() {
      parent.removeChild(removeChildren(element, node));
    }

    var cb = node.attributes && node.attributes.onremove;
    if (cb) {
      cb(element, done);
    } else {
      done();
    }
  }

  function patch(parent, element, oldNode, node, isSvg) {
    if (node === oldNode) {
    } else if (oldNode == null || oldNode.nodeName !== node.nodeName) {
      var newElement = createElement(node, isSvg);
      parent.insertBefore(newElement, element);

      if (oldNode != null) {
        removeElement(parent, element, oldNode);
      }

      element = newElement;
    } else if (oldNode.nodeName == null) {
      element.nodeValue = node;
    } else {
      updateElement(
        element,
        oldNode.attributes,
        node.attributes,
        (isSvg = isSvg || node.nodeName === "svg")
      );

      var oldKeyed = {};
      var newKeyed = {};
      var oldElements = [];
      var oldChildren = oldNode.children;
      var children = node.children;

      for (var i = 0; i < oldChildren.length; i++) {
        oldElements[i] = element.childNodes[i];

        var oldKey = getKey(oldChildren[i]);
        if (oldKey != null) {
          oldKeyed[oldKey] = [oldElements[i], oldChildren[i]];
        }
      }

      var i = 0;
      var k = 0;

      while (k < children.length) {
        var oldKey = getKey(oldChildren[i]);
        var newKey = getKey((children[k] = resolveNode(children[k])));

        if (newKeyed[oldKey]) {
          i++;
          continue
        }

        if (newKey == null || isRecycling) {
          if (oldKey == null) {
            patch(element, oldElements[i], oldChildren[i], children[k], isSvg);
            k++;
          }
          i++;
        } else {
          var keyedNode = oldKeyed[newKey] || [];

          if (oldKey === newKey) {
            patch(element, keyedNode[0], keyedNode[1], children[k], isSvg);
            i++;
          } else if (keyedNode[0]) {
            patch(
              element,
              element.insertBefore(keyedNode[0], oldElements[i]),
              keyedNode[1],
              children[k],
              isSvg
            );
          } else {
            patch(element, oldElements[i], null, children[k], isSvg);
          }

          newKeyed[newKey] = children[k];
          k++;
        }
      }

      while (i < oldChildren.length) {
        if (getKey(oldChildren[i]) == null) {
          removeElement(element, oldElements[i], oldChildren[i]);
        }
        i++;
      }

      for (var i in oldKeyed) {
        if (!newKeyed[i]) {
          removeElement(element, oldKeyed[i][0], oldKeyed[i][1]);
        }
      }
    }
    return element
  }
}

function getOrigin(loc) {
  return loc.protocol + "//" + loc.hostname + (loc.port ? ":" + loc.port : "")
}

function isExternal(anchorElement) {
  // Location.origin and HTMLAnchorElement.origin are not
  // supported by IE and Safari.
  return getOrigin(location) !== getOrigin(anchorElement)
}

function Link(props, children) {
  return function(state, actions) {
    var to = props.to;
    var location = state.location;
    var onclick = props.onclick;
    delete props.to;
    delete props.location;

    props.href = to;
    props.onclick = function(e) {
      if (onclick) {
        onclick(e);
      }
      if (
        e.defaultPrevented ||
        e.button !== 0 ||
        e.altKey ||
        e.metaKey ||
        e.ctrlKey ||
        e.shiftKey ||
        props.target === "_blank" ||
        isExternal(e.currentTarget)
      ) {
      } else {
        e.preventDefault();

        if (to !== location.pathname) {
          history.pushState(location.pathname, "", to);
        }
      }
    };

    return h("a", props, children)
  }
}

function createMatch(isExact, path, url, params) {
  return {
    isExact: isExact,
    path: path,
    url: url,
    params: params
  }
}

function trimTrailingSlash(url) {
  for (var len = url.length; "/" === url[--len]; );
  return url.slice(0, len + 1)
}

function decodeParam(val) {
  try {
    return decodeURIComponent(val)
  } catch (e) {
    return val
  }
}

function parseRoute(path, url, options) {
  if (path === url || !path) {
    return createMatch(path === url, path, url)
  }

  var exact = options && options.exact;
  var paths = trimTrailingSlash(path).split("/");
  var urls = trimTrailingSlash(url).split("/");

  if (paths.length > urls.length || (exact && paths.length < urls.length)) {
    return
  }

  for (var i = 0, params = {}, len = paths.length, url = ""; i < len; i++) {
    if (":" === paths[i][0]) {
      params[paths[i].slice(1)] = urls[i] = decodeParam(urls[i]);
    } else if (paths[i] !== urls[i]) {
      return
    }
    url += urls[i] + "/";
  }

  return createMatch(false, path, url.slice(0, -1), params)
}

function Route(props) {
  return function(state, actions) {
    var location = state.location;
    var match = parseRoute(props.path, location.pathname, {
      exact: !props.parent
    });

    return (
      match &&
      props.render({
        match: match,
        location: location
      })
    )
  }
}

function Switch(props, children) {
  return function(state, actions) {
    var child,
      i = 0;
    while (
      !(child = children[i] && children[i](state, actions)) &&
      i < children.length
    )
      i++;
    return child
  }
}

function wrapHistory(keys) {
  return keys.reduce(function(next, key) {
    var fn = history[key];

    history[key] = function(data, title, url) {
      fn.call(this, data, title, url);
      dispatchEvent(new CustomEvent("pushstate", { detail: data }));
    };

    return function() {
      history[key] = fn;
      next && next();
    }
  }, null)
}

var location$1 = {
  state: {
    pathname: window.location.pathname,
    previous: window.location.pathname
  },
  actions: {
    go: function(pathname) {
      history.pushState(null, "", pathname);
    },
    set: function(data) {
      return data
    }
  },
  subscribe: function(actions) {
    function handleLocationChange(e) {
      actions.set({
        pathname: window.location.pathname,
        previous: e.detail
          ? (window.location.previous = e.detail)
          : window.location.previous
      });
    }

    var unwrap = wrapHistory(["pushState", "replaceState"]);

    addEventListener("pushstate", handleLocationChange);
    addEventListener("popstate", handleLocationChange);

    return function() {
      removeEventListener("pushstate", handleLocationChange);
      removeEventListener("popstate", handleLocationChange);
      unwrap();
    }
  }
};

var state = {
  location: location$1.state,
  name: ''
};

var actions = {
  location: location$1.actions,
  setName: function setName(val) {
    return function (state) {
      return { name: state.name = val };
    };
  }
};

var Auth = function Auth() {
  return function (state, actions) {
    return h(
      "div",
      null,
      h(
        "h1",
        null,
        " Login "
      ),
      h("br", null),
      h("input", { type: "text", placeholder: "Email or Username", "class": "input",
        oninput: function oninput(e) {
          return actions.setName(e.target.value);
        } }),
      h("br", null),
      h("input", { type: "password", placeholder: "Password", "class": "input"

      }),
      h("br", null),
      h(
        Link,
        { to: "/home" },
        " ",
        h(
          "div",
          { "class": "btn" },
          "log in"
        ),
        " "
      )
    );
  };
};

var App = function App() {
  return function (state, actions) {
    return h(
      'div',
      null,
      h(Auth, null)
    );
  };
};

var Home = function Home() {
  return function (state, actions) {
    return h(
      "div",
      null,
      h(
        "h1",
        null,
        h(
          "i",
          null,
          " welcome,  ",
          state.name,
          " "
        )
      ),
      h(
        "form",
        null,
        h(
          "textarea",
          { name: "message", rows: "10", cols: "30", "class": "form-field__textarea" },
          "Please type your message eg (FUTMinna)"
        )
      ),
      h(
        Link,
        { to: "/message" },
        " ",
        h(
          "div",
          { "class": "btn" },
          "submit"
        ),
        " "
      )
    );
  };
};

var Message = function Message() {
  return function (state, actions) {
    return h(
      "div",
      null,
      h(
        "i",
        null,
        h(
          "b",
          null,
          " your Message has been sent! thank you"
        )
      )
    );
  };
};

var view = function view(state, actions) {
    return h(
        'div',
        null,
        h(
            Switch,
            null,
            h(Route, { path: '/', render: App }),
            h(Route, { path: '/home', render: Home }),
            h(Route, { path: '/message', render: Message })
        )
    );
};

var main = app(state, actions, view, document.querySelector('.hyperapp-root'));

var unsubscribe = location$1.subscribe(main.location);

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXgubWluLmpzIiwic291cmNlcyI6WyIuLi9ub2RlX21vZHVsZXMvaHlwZXJhcHAvc3JjL2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzL0BoeXBlcmFwcC9yb3V0ZXIvc3JjL0xpbmsuanMiLCIuLi9ub2RlX21vZHVsZXMvQGh5cGVyYXBwL3JvdXRlci9zcmMvcGFyc2VSb3V0ZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9AaHlwZXJhcHAvcm91dGVyL3NyYy9Sb3V0ZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9AaHlwZXJhcHAvcm91dGVyL3NyYy9Td2l0Y2guanMiLCIuLi9ub2RlX21vZHVsZXMvQGh5cGVyYXBwL3JvdXRlci9zcmMvbG9jYXRpb24uanMiLCIuLi9zcmMvc3RhdGUvc3RhdGUuanMiLCIuLi9zcmMvYWN0aW9ucy9hY3Rpb25zLmpzIiwiLi4vc3JjL2NvbXBvbmVudHMvQXV0aC5qcyIsIi4uL3NyYy92aWV3cy9jb250YWluZXJzL0FwcC5qcyIsIi4uL3NyYy9jb21wb25lbnRzL0hvbWUuanMiLCIuLi9zcmMvY29tcG9uZW50cy9NZXNzYWdlLmpzIiwiLi4vc3JjL3JvdXRlcy5qcyIsIi4uL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gaChuYW1lLCBhdHRyaWJ1dGVzKSB7XG4gIHZhciByZXN0ID0gW11cbiAgdmFyIGNoaWxkcmVuID0gW11cbiAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGhcblxuICB3aGlsZSAobGVuZ3RoLS0gPiAyKSByZXN0LnB1c2goYXJndW1lbnRzW2xlbmd0aF0pXG5cbiAgd2hpbGUgKHJlc3QubGVuZ3RoKSB7XG4gICAgdmFyIG5vZGUgPSByZXN0LnBvcCgpXG4gICAgaWYgKG5vZGUgJiYgbm9kZS5wb3ApIHtcbiAgICAgIGZvciAobGVuZ3RoID0gbm9kZS5sZW5ndGg7IGxlbmd0aC0tOyApIHtcbiAgICAgICAgcmVzdC5wdXNoKG5vZGVbbGVuZ3RoXSlcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG5vZGUgIT0gbnVsbCAmJiBub2RlICE9PSB0cnVlICYmIG5vZGUgIT09IGZhbHNlKSB7XG4gICAgICBjaGlsZHJlbi5wdXNoKG5vZGUpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHR5cGVvZiBuYW1lID09PSBcImZ1bmN0aW9uXCJcbiAgICA/IG5hbWUoYXR0cmlidXRlcyB8fCB7fSwgY2hpbGRyZW4pXG4gICAgOiB7XG4gICAgICAgIG5vZGVOYW1lOiBuYW1lLFxuICAgICAgICBhdHRyaWJ1dGVzOiBhdHRyaWJ1dGVzIHx8IHt9LFxuICAgICAgICBjaGlsZHJlbjogY2hpbGRyZW4sXG4gICAgICAgIGtleTogYXR0cmlidXRlcyAmJiBhdHRyaWJ1dGVzLmtleVxuICAgICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gYXBwKHN0YXRlLCBhY3Rpb25zLCB2aWV3LCBjb250YWluZXIpIHtcbiAgdmFyIG1hcCA9IFtdLm1hcFxuICB2YXIgcm9vdEVsZW1lbnQgPSAoY29udGFpbmVyICYmIGNvbnRhaW5lci5jaGlsZHJlblswXSkgfHwgbnVsbFxuICB2YXIgb2xkTm9kZSA9IHJvb3RFbGVtZW50ICYmIHJlY3ljbGVFbGVtZW50KHJvb3RFbGVtZW50KVxuICB2YXIgbGlmZWN5Y2xlID0gW11cbiAgdmFyIHNraXBSZW5kZXJcbiAgdmFyIGlzUmVjeWNsaW5nID0gdHJ1ZVxuICB2YXIgZ2xvYmFsU3RhdGUgPSBjbG9uZShzdGF0ZSlcbiAgdmFyIHdpcmVkQWN0aW9ucyA9IHdpcmVTdGF0ZVRvQWN0aW9ucyhbXSwgZ2xvYmFsU3RhdGUsIGNsb25lKGFjdGlvbnMpKVxuXG4gIHNjaGVkdWxlUmVuZGVyKClcblxuICByZXR1cm4gd2lyZWRBY3Rpb25zXG5cbiAgZnVuY3Rpb24gcmVjeWNsZUVsZW1lbnQoZWxlbWVudCkge1xuICAgIHJldHVybiB7XG4gICAgICBub2RlTmFtZTogZWxlbWVudC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpLFxuICAgICAgYXR0cmlidXRlczoge30sXG4gICAgICBjaGlsZHJlbjogbWFwLmNhbGwoZWxlbWVudC5jaGlsZE5vZGVzLCBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgICAgIHJldHVybiBlbGVtZW50Lm5vZGVUeXBlID09PSAzIC8vIE5vZGUuVEVYVF9OT0RFXG4gICAgICAgICAgPyBlbGVtZW50Lm5vZGVWYWx1ZVxuICAgICAgICAgIDogcmVjeWNsZUVsZW1lbnQoZWxlbWVudClcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVzb2x2ZU5vZGUobm9kZSkge1xuICAgIHJldHVybiB0eXBlb2Ygbm9kZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICA/IHJlc29sdmVOb2RlKG5vZGUoZ2xvYmFsU3RhdGUsIHdpcmVkQWN0aW9ucykpXG4gICAgICA6IG5vZGUgIT0gbnVsbCA/IG5vZGUgOiBcIlwiXG4gIH1cblxuICBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgc2tpcFJlbmRlciA9ICFza2lwUmVuZGVyXG5cbiAgICB2YXIgbm9kZSA9IHJlc29sdmVOb2RlKHZpZXcpXG5cbiAgICBpZiAoY29udGFpbmVyICYmICFza2lwUmVuZGVyKSB7XG4gICAgICByb290RWxlbWVudCA9IHBhdGNoKGNvbnRhaW5lciwgcm9vdEVsZW1lbnQsIG9sZE5vZGUsIChvbGROb2RlID0gbm9kZSkpXG4gICAgfVxuXG4gICAgaXNSZWN5Y2xpbmcgPSBmYWxzZVxuXG4gICAgd2hpbGUgKGxpZmVjeWNsZS5sZW5ndGgpIGxpZmVjeWNsZS5wb3AoKSgpXG4gIH1cblxuICBmdW5jdGlvbiBzY2hlZHVsZVJlbmRlcigpIHtcbiAgICBpZiAoIXNraXBSZW5kZXIpIHtcbiAgICAgIHNraXBSZW5kZXIgPSB0cnVlXG4gICAgICBzZXRUaW1lb3V0KHJlbmRlcilcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjbG9uZSh0YXJnZXQsIHNvdXJjZSkge1xuICAgIHZhciBvdXQgPSB7fVxuXG4gICAgZm9yICh2YXIgaSBpbiB0YXJnZXQpIG91dFtpXSA9IHRhcmdldFtpXVxuICAgIGZvciAodmFyIGkgaW4gc291cmNlKSBvdXRbaV0gPSBzb3VyY2VbaV1cblxuICAgIHJldHVybiBvdXRcbiAgfVxuXG4gIGZ1bmN0aW9uIHNldChwYXRoLCB2YWx1ZSwgc291cmNlKSB7XG4gICAgdmFyIHRhcmdldCA9IHt9XG4gICAgaWYgKHBhdGgubGVuZ3RoKSB7XG4gICAgICB0YXJnZXRbcGF0aFswXV0gPVxuICAgICAgICBwYXRoLmxlbmd0aCA+IDEgPyBzZXQocGF0aC5zbGljZSgxKSwgdmFsdWUsIHNvdXJjZVtwYXRoWzBdXSkgOiB2YWx1ZVxuICAgICAgcmV0dXJuIGNsb25lKHNvdXJjZSwgdGFyZ2V0KVxuICAgIH1cbiAgICByZXR1cm4gdmFsdWVcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldChwYXRoLCBzb3VyY2UpIHtcbiAgICB2YXIgaSA9IDBcbiAgICB3aGlsZSAoaSA8IHBhdGgubGVuZ3RoKSB7XG4gICAgICBzb3VyY2UgPSBzb3VyY2VbcGF0aFtpKytdXVxuICAgIH1cbiAgICByZXR1cm4gc291cmNlXG4gIH1cblxuICBmdW5jdGlvbiB3aXJlU3RhdGVUb0FjdGlvbnMocGF0aCwgc3RhdGUsIGFjdGlvbnMpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gYWN0aW9ucykge1xuICAgICAgdHlwZW9mIGFjdGlvbnNba2V5XSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgID8gKGZ1bmN0aW9uKGtleSwgYWN0aW9uKSB7XG4gICAgICAgICAgICBhY3Rpb25zW2tleV0gPSBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgIHZhciByZXN1bHQgPSBhY3Rpb24oZGF0YSlcblxuICAgICAgICAgICAgICBpZiAodHlwZW9mIHJlc3VsdCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0KGdldChwYXRoLCBnbG9iYWxTdGF0ZSksIGFjdGlvbnMpXG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgcmVzdWx0ICYmXG4gICAgICAgICAgICAgICAgcmVzdWx0ICE9PSAoc3RhdGUgPSBnZXQocGF0aCwgZ2xvYmFsU3RhdGUpKSAmJlxuICAgICAgICAgICAgICAgICFyZXN1bHQudGhlbiAvLyAhaXNQcm9taXNlXG4gICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHNjaGVkdWxlUmVuZGVyKFxuICAgICAgICAgICAgICAgICAgKGdsb2JhbFN0YXRlID0gc2V0KHBhdGgsIGNsb25lKHN0YXRlLCByZXN1bHQpLCBnbG9iYWxTdGF0ZSkpXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pKGtleSwgYWN0aW9uc1trZXldKVxuICAgICAgICA6IHdpcmVTdGF0ZVRvQWN0aW9ucyhcbiAgICAgICAgICAgIHBhdGguY29uY2F0KGtleSksXG4gICAgICAgICAgICAoc3RhdGVba2V5XSA9IGNsb25lKHN0YXRlW2tleV0pKSxcbiAgICAgICAgICAgIChhY3Rpb25zW2tleV0gPSBjbG9uZShhY3Rpb25zW2tleV0pKVxuICAgICAgICAgIClcbiAgICB9XG5cbiAgICByZXR1cm4gYWN0aW9uc1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0S2V5KG5vZGUpIHtcbiAgICByZXR1cm4gbm9kZSA/IG5vZGUua2V5IDogbnVsbFxuICB9XG5cbiAgZnVuY3Rpb24gZXZlbnRMaXN0ZW5lcihldmVudCkge1xuICAgIHJldHVybiBldmVudC5jdXJyZW50VGFyZ2V0LmV2ZW50c1tldmVudC50eXBlXShldmVudClcbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZUF0dHJpYnV0ZShlbGVtZW50LCBuYW1lLCB2YWx1ZSwgb2xkVmFsdWUsIGlzU3ZnKSB7XG4gICAgaWYgKG5hbWUgPT09IFwia2V5XCIpIHtcbiAgICB9IGVsc2UgaWYgKG5hbWUgPT09IFwic3R5bGVcIikge1xuICAgICAgZm9yICh2YXIgaSBpbiBjbG9uZShvbGRWYWx1ZSwgdmFsdWUpKSB7XG4gICAgICAgIHZhciBzdHlsZSA9IHZhbHVlID09IG51bGwgfHwgdmFsdWVbaV0gPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZVtpXVxuICAgICAgICBpZiAoaVswXSA9PT0gXCItXCIpIHtcbiAgICAgICAgICBlbGVtZW50W25hbWVdLnNldFByb3BlcnR5KGksIHN0eWxlKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGVsZW1lbnRbbmFtZV1baV0gPSBzdHlsZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChuYW1lWzBdID09PSBcIm9cIiAmJiBuYW1lWzFdID09PSBcIm5cIikge1xuICAgICAgICBuYW1lID0gbmFtZS5zbGljZSgyKVxuXG4gICAgICAgIGlmIChlbGVtZW50LmV2ZW50cykge1xuICAgICAgICAgIGlmICghb2xkVmFsdWUpIG9sZFZhbHVlID0gZWxlbWVudC5ldmVudHNbbmFtZV1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBlbGVtZW50LmV2ZW50cyA9IHt9XG4gICAgICAgIH1cblxuICAgICAgICBlbGVtZW50LmV2ZW50c1tuYW1lXSA9IHZhbHVlXG5cbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgaWYgKCFvbGRWYWx1ZSkge1xuICAgICAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKG5hbWUsIGV2ZW50TGlzdGVuZXIpXG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihuYW1lLCBldmVudExpc3RlbmVyKVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKG5hbWUgaW4gZWxlbWVudCAmJiBuYW1lICE9PSBcImxpc3RcIiAmJiAhaXNTdmcpIHtcbiAgICAgICAgZWxlbWVudFtuYW1lXSA9IHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWVcbiAgICAgIH0gZWxzZSBpZiAodmFsdWUgIT0gbnVsbCAmJiB2YWx1ZSAhPT0gZmFsc2UpIHtcbiAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUobmFtZSwgdmFsdWUpXG4gICAgICB9XG5cbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsIHx8IHZhbHVlID09PSBmYWxzZSkge1xuICAgICAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShuYW1lKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnQobm9kZSwgaXNTdmcpIHtcbiAgICB2YXIgZWxlbWVudCA9XG4gICAgICB0eXBlb2Ygbm9kZSA9PT0gXCJzdHJpbmdcIiB8fCB0eXBlb2Ygbm9kZSA9PT0gXCJudW1iZXJcIlxuICAgICAgICA/IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKG5vZGUpXG4gICAgICAgIDogKGlzU3ZnID0gaXNTdmcgfHwgbm9kZS5ub2RlTmFtZSA9PT0gXCJzdmdcIilcbiAgICAgICAgICA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhcbiAgICAgICAgICAgICAgXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLFxuICAgICAgICAgICAgICBub2RlLm5vZGVOYW1lXG4gICAgICAgICAgICApXG4gICAgICAgICAgOiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KG5vZGUubm9kZU5hbWUpXG5cbiAgICB2YXIgYXR0cmlidXRlcyA9IG5vZGUuYXR0cmlidXRlc1xuICAgIGlmIChhdHRyaWJ1dGVzKSB7XG4gICAgICBpZiAoYXR0cmlidXRlcy5vbmNyZWF0ZSkge1xuICAgICAgICBsaWZlY3ljbGUucHVzaChmdW5jdGlvbigpIHtcbiAgICAgICAgICBhdHRyaWJ1dGVzLm9uY3JlYXRlKGVsZW1lbnQpXG4gICAgICAgIH0pXG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZS5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICBlbGVtZW50LmFwcGVuZENoaWxkKFxuICAgICAgICAgIGNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAobm9kZS5jaGlsZHJlbltpXSA9IHJlc29sdmVOb2RlKG5vZGUuY2hpbGRyZW5baV0pKSxcbiAgICAgICAgICAgIGlzU3ZnXG4gICAgICAgICAgKVxuICAgICAgICApXG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIG5hbWUgaW4gYXR0cmlidXRlcykge1xuICAgICAgICB1cGRhdGVBdHRyaWJ1dGUoZWxlbWVudCwgbmFtZSwgYXR0cmlidXRlc1tuYW1lXSwgbnVsbCwgaXNTdmcpXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGVsZW1lbnRcbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZUVsZW1lbnQoZWxlbWVudCwgb2xkQXR0cmlidXRlcywgYXR0cmlidXRlcywgaXNTdmcpIHtcbiAgICBmb3IgKHZhciBuYW1lIGluIGNsb25lKG9sZEF0dHJpYnV0ZXMsIGF0dHJpYnV0ZXMpKSB7XG4gICAgICBpZiAoXG4gICAgICAgIGF0dHJpYnV0ZXNbbmFtZV0gIT09XG4gICAgICAgIChuYW1lID09PSBcInZhbHVlXCIgfHwgbmFtZSA9PT0gXCJjaGVja2VkXCJcbiAgICAgICAgICA/IGVsZW1lbnRbbmFtZV1cbiAgICAgICAgICA6IG9sZEF0dHJpYnV0ZXNbbmFtZV0pXG4gICAgICApIHtcbiAgICAgICAgdXBkYXRlQXR0cmlidXRlKFxuICAgICAgICAgIGVsZW1lbnQsXG4gICAgICAgICAgbmFtZSxcbiAgICAgICAgICBhdHRyaWJ1dGVzW25hbWVdLFxuICAgICAgICAgIG9sZEF0dHJpYnV0ZXNbbmFtZV0sXG4gICAgICAgICAgaXNTdmdcbiAgICAgICAgKVxuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBjYiA9IGlzUmVjeWNsaW5nID8gYXR0cmlidXRlcy5vbmNyZWF0ZSA6IGF0dHJpYnV0ZXMub251cGRhdGVcbiAgICBpZiAoY2IpIHtcbiAgICAgIGxpZmVjeWNsZS5wdXNoKGZ1bmN0aW9uKCkge1xuICAgICAgICBjYihlbGVtZW50LCBvbGRBdHRyaWJ1dGVzKVxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZW1vdmVDaGlsZHJlbihlbGVtZW50LCBub2RlKSB7XG4gICAgdmFyIGF0dHJpYnV0ZXMgPSBub2RlLmF0dHJpYnV0ZXNcbiAgICBpZiAoYXR0cmlidXRlcykge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBub2RlLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHJlbW92ZUNoaWxkcmVuKGVsZW1lbnQuY2hpbGROb2Rlc1tpXSwgbm9kZS5jaGlsZHJlbltpXSlcbiAgICAgIH1cblxuICAgICAgaWYgKGF0dHJpYnV0ZXMub25kZXN0cm95KSB7XG4gICAgICAgIGF0dHJpYnV0ZXMub25kZXN0cm95KGVsZW1lbnQpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBlbGVtZW50XG4gIH1cblxuICBmdW5jdGlvbiByZW1vdmVFbGVtZW50KHBhcmVudCwgZWxlbWVudCwgbm9kZSkge1xuICAgIGZ1bmN0aW9uIGRvbmUoKSB7XG4gICAgICBwYXJlbnQucmVtb3ZlQ2hpbGQocmVtb3ZlQ2hpbGRyZW4oZWxlbWVudCwgbm9kZSkpXG4gICAgfVxuXG4gICAgdmFyIGNiID0gbm9kZS5hdHRyaWJ1dGVzICYmIG5vZGUuYXR0cmlidXRlcy5vbnJlbW92ZVxuICAgIGlmIChjYikge1xuICAgICAgY2IoZWxlbWVudCwgZG9uZSlcbiAgICB9IGVsc2Uge1xuICAgICAgZG9uZSgpXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcGF0Y2gocGFyZW50LCBlbGVtZW50LCBvbGROb2RlLCBub2RlLCBpc1N2Zykge1xuICAgIGlmIChub2RlID09PSBvbGROb2RlKSB7XG4gICAgfSBlbHNlIGlmIChvbGROb2RlID09IG51bGwgfHwgb2xkTm9kZS5ub2RlTmFtZSAhPT0gbm9kZS5ub2RlTmFtZSkge1xuICAgICAgdmFyIG5ld0VsZW1lbnQgPSBjcmVhdGVFbGVtZW50KG5vZGUsIGlzU3ZnKVxuICAgICAgcGFyZW50Lmluc2VydEJlZm9yZShuZXdFbGVtZW50LCBlbGVtZW50KVxuXG4gICAgICBpZiAob2xkTm9kZSAhPSBudWxsKSB7XG4gICAgICAgIHJlbW92ZUVsZW1lbnQocGFyZW50LCBlbGVtZW50LCBvbGROb2RlKVxuICAgICAgfVxuXG4gICAgICBlbGVtZW50ID0gbmV3RWxlbWVudFxuICAgIH0gZWxzZSBpZiAob2xkTm9kZS5ub2RlTmFtZSA9PSBudWxsKSB7XG4gICAgICBlbGVtZW50Lm5vZGVWYWx1ZSA9IG5vZGVcbiAgICB9IGVsc2Uge1xuICAgICAgdXBkYXRlRWxlbWVudChcbiAgICAgICAgZWxlbWVudCxcbiAgICAgICAgb2xkTm9kZS5hdHRyaWJ1dGVzLFxuICAgICAgICBub2RlLmF0dHJpYnV0ZXMsXG4gICAgICAgIChpc1N2ZyA9IGlzU3ZnIHx8IG5vZGUubm9kZU5hbWUgPT09IFwic3ZnXCIpXG4gICAgICApXG5cbiAgICAgIHZhciBvbGRLZXllZCA9IHt9XG4gICAgICB2YXIgbmV3S2V5ZWQgPSB7fVxuICAgICAgdmFyIG9sZEVsZW1lbnRzID0gW11cbiAgICAgIHZhciBvbGRDaGlsZHJlbiA9IG9sZE5vZGUuY2hpbGRyZW5cbiAgICAgIHZhciBjaGlsZHJlbiA9IG5vZGUuY2hpbGRyZW5cblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvbGRDaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICBvbGRFbGVtZW50c1tpXSA9IGVsZW1lbnQuY2hpbGROb2Rlc1tpXVxuXG4gICAgICAgIHZhciBvbGRLZXkgPSBnZXRLZXkob2xkQ2hpbGRyZW5baV0pXG4gICAgICAgIGlmIChvbGRLZXkgIT0gbnVsbCkge1xuICAgICAgICAgIG9sZEtleWVkW29sZEtleV0gPSBbb2xkRWxlbWVudHNbaV0sIG9sZENoaWxkcmVuW2ldXVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciBpID0gMFxuICAgICAgdmFyIGsgPSAwXG5cbiAgICAgIHdoaWxlIChrIDwgY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICAgIHZhciBvbGRLZXkgPSBnZXRLZXkob2xkQ2hpbGRyZW5baV0pXG4gICAgICAgIHZhciBuZXdLZXkgPSBnZXRLZXkoKGNoaWxkcmVuW2tdID0gcmVzb2x2ZU5vZGUoY2hpbGRyZW5ba10pKSlcblxuICAgICAgICBpZiAobmV3S2V5ZWRbb2xkS2V5XSkge1xuICAgICAgICAgIGkrK1xuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cblxuICAgICAgICBpZiAobmV3S2V5ID09IG51bGwgfHwgaXNSZWN5Y2xpbmcpIHtcbiAgICAgICAgICBpZiAob2xkS2V5ID09IG51bGwpIHtcbiAgICAgICAgICAgIHBhdGNoKGVsZW1lbnQsIG9sZEVsZW1lbnRzW2ldLCBvbGRDaGlsZHJlbltpXSwgY2hpbGRyZW5ba10sIGlzU3ZnKVxuICAgICAgICAgICAgaysrXG4gICAgICAgICAgfVxuICAgICAgICAgIGkrK1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBrZXllZE5vZGUgPSBvbGRLZXllZFtuZXdLZXldIHx8IFtdXG5cbiAgICAgICAgICBpZiAob2xkS2V5ID09PSBuZXdLZXkpIHtcbiAgICAgICAgICAgIHBhdGNoKGVsZW1lbnQsIGtleWVkTm9kZVswXSwga2V5ZWROb2RlWzFdLCBjaGlsZHJlbltrXSwgaXNTdmcpXG4gICAgICAgICAgICBpKytcbiAgICAgICAgICB9IGVsc2UgaWYgKGtleWVkTm9kZVswXSkge1xuICAgICAgICAgICAgcGF0Y2goXG4gICAgICAgICAgICAgIGVsZW1lbnQsXG4gICAgICAgICAgICAgIGVsZW1lbnQuaW5zZXJ0QmVmb3JlKGtleWVkTm9kZVswXSwgb2xkRWxlbWVudHNbaV0pLFxuICAgICAgICAgICAgICBrZXllZE5vZGVbMV0sXG4gICAgICAgICAgICAgIGNoaWxkcmVuW2tdLFxuICAgICAgICAgICAgICBpc1N2Z1xuICAgICAgICAgICAgKVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwYXRjaChlbGVtZW50LCBvbGRFbGVtZW50c1tpXSwgbnVsbCwgY2hpbGRyZW5ba10sIGlzU3ZnKVxuICAgICAgICAgIH1cblxuICAgICAgICAgIG5ld0tleWVkW25ld0tleV0gPSBjaGlsZHJlbltrXVxuICAgICAgICAgIGsrK1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHdoaWxlIChpIDwgb2xkQ2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICAgIGlmIChnZXRLZXkob2xkQ2hpbGRyZW5baV0pID09IG51bGwpIHtcbiAgICAgICAgICByZW1vdmVFbGVtZW50KGVsZW1lbnQsIG9sZEVsZW1lbnRzW2ldLCBvbGRDaGlsZHJlbltpXSlcbiAgICAgICAgfVxuICAgICAgICBpKytcbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaSBpbiBvbGRLZXllZCkge1xuICAgICAgICBpZiAoIW5ld0tleWVkW2ldKSB7XG4gICAgICAgICAgcmVtb3ZlRWxlbWVudChlbGVtZW50LCBvbGRLZXllZFtpXVswXSwgb2xkS2V5ZWRbaV1bMV0pXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGVsZW1lbnRcbiAgfVxufVxuIiwiaW1wb3J0IHsgaCB9IGZyb20gXCJoeXBlcmFwcFwiXG5cbmZ1bmN0aW9uIGdldE9yaWdpbihsb2MpIHtcbiAgcmV0dXJuIGxvYy5wcm90b2NvbCArIFwiLy9cIiArIGxvYy5ob3N0bmFtZSArIChsb2MucG9ydCA/IFwiOlwiICsgbG9jLnBvcnQgOiBcIlwiKVxufVxuXG5mdW5jdGlvbiBpc0V4dGVybmFsKGFuY2hvckVsZW1lbnQpIHtcbiAgLy8gTG9jYXRpb24ub3JpZ2luIGFuZCBIVE1MQW5jaG9yRWxlbWVudC5vcmlnaW4gYXJlIG5vdFxuICAvLyBzdXBwb3J0ZWQgYnkgSUUgYW5kIFNhZmFyaS5cbiAgcmV0dXJuIGdldE9yaWdpbihsb2NhdGlvbikgIT09IGdldE9yaWdpbihhbmNob3JFbGVtZW50KVxufVxuXG5leHBvcnQgZnVuY3Rpb24gTGluayhwcm9wcywgY2hpbGRyZW4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHN0YXRlLCBhY3Rpb25zKSB7XG4gICAgdmFyIHRvID0gcHJvcHMudG9cbiAgICB2YXIgbG9jYXRpb24gPSBzdGF0ZS5sb2NhdGlvblxuICAgIHZhciBvbmNsaWNrID0gcHJvcHMub25jbGlja1xuICAgIGRlbGV0ZSBwcm9wcy50b1xuICAgIGRlbGV0ZSBwcm9wcy5sb2NhdGlvblxuXG4gICAgcHJvcHMuaHJlZiA9IHRvXG4gICAgcHJvcHMub25jbGljayA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgIGlmIChvbmNsaWNrKSB7XG4gICAgICAgIG9uY2xpY2soZSlcbiAgICAgIH1cbiAgICAgIGlmIChcbiAgICAgICAgZS5kZWZhdWx0UHJldmVudGVkIHx8XG4gICAgICAgIGUuYnV0dG9uICE9PSAwIHx8XG4gICAgICAgIGUuYWx0S2V5IHx8XG4gICAgICAgIGUubWV0YUtleSB8fFxuICAgICAgICBlLmN0cmxLZXkgfHxcbiAgICAgICAgZS5zaGlmdEtleSB8fFxuICAgICAgICBwcm9wcy50YXJnZXQgPT09IFwiX2JsYW5rXCIgfHxcbiAgICAgICAgaXNFeHRlcm5hbChlLmN1cnJlbnRUYXJnZXQpXG4gICAgICApIHtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKVxuXG4gICAgICAgIGlmICh0byAhPT0gbG9jYXRpb24ucGF0aG5hbWUpIHtcbiAgICAgICAgICBoaXN0b3J5LnB1c2hTdGF0ZShsb2NhdGlvbi5wYXRobmFtZSwgXCJcIiwgdG8pXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gaChcImFcIiwgcHJvcHMsIGNoaWxkcmVuKVxuICB9XG59XG4iLCJmdW5jdGlvbiBjcmVhdGVNYXRjaChpc0V4YWN0LCBwYXRoLCB1cmwsIHBhcmFtcykge1xuICByZXR1cm4ge1xuICAgIGlzRXhhY3Q6IGlzRXhhY3QsXG4gICAgcGF0aDogcGF0aCxcbiAgICB1cmw6IHVybCxcbiAgICBwYXJhbXM6IHBhcmFtc1xuICB9XG59XG5cbmZ1bmN0aW9uIHRyaW1UcmFpbGluZ1NsYXNoKHVybCkge1xuICBmb3IgKHZhciBsZW4gPSB1cmwubGVuZ3RoOyBcIi9cIiA9PT0gdXJsWy0tbGVuXTsgKTtcbiAgcmV0dXJuIHVybC5zbGljZSgwLCBsZW4gKyAxKVxufVxuXG5mdW5jdGlvbiBkZWNvZGVQYXJhbSh2YWwpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KHZhbClcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB2YWxcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VSb3V0ZShwYXRoLCB1cmwsIG9wdGlvbnMpIHtcbiAgaWYgKHBhdGggPT09IHVybCB8fCAhcGF0aCkge1xuICAgIHJldHVybiBjcmVhdGVNYXRjaChwYXRoID09PSB1cmwsIHBhdGgsIHVybClcbiAgfVxuXG4gIHZhciBleGFjdCA9IG9wdGlvbnMgJiYgb3B0aW9ucy5leGFjdFxuICB2YXIgcGF0aHMgPSB0cmltVHJhaWxpbmdTbGFzaChwYXRoKS5zcGxpdChcIi9cIilcbiAgdmFyIHVybHMgPSB0cmltVHJhaWxpbmdTbGFzaCh1cmwpLnNwbGl0KFwiL1wiKVxuXG4gIGlmIChwYXRocy5sZW5ndGggPiB1cmxzLmxlbmd0aCB8fCAoZXhhY3QgJiYgcGF0aHMubGVuZ3RoIDwgdXJscy5sZW5ndGgpKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICBmb3IgKHZhciBpID0gMCwgcGFyYW1zID0ge30sIGxlbiA9IHBhdGhzLmxlbmd0aCwgdXJsID0gXCJcIjsgaSA8IGxlbjsgaSsrKSB7XG4gICAgaWYgKFwiOlwiID09PSBwYXRoc1tpXVswXSkge1xuICAgICAgcGFyYW1zW3BhdGhzW2ldLnNsaWNlKDEpXSA9IHVybHNbaV0gPSBkZWNvZGVQYXJhbSh1cmxzW2ldKVxuICAgIH0gZWxzZSBpZiAocGF0aHNbaV0gIT09IHVybHNbaV0pIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICB1cmwgKz0gdXJsc1tpXSArIFwiL1wiXG4gIH1cblxuICByZXR1cm4gY3JlYXRlTWF0Y2goZmFsc2UsIHBhdGgsIHVybC5zbGljZSgwLCAtMSksIHBhcmFtcylcbn1cbiIsImltcG9ydCB7IHBhcnNlUm91dGUgfSBmcm9tIFwiLi9wYXJzZVJvdXRlXCJcblxuZXhwb3J0IGZ1bmN0aW9uIFJvdXRlKHByb3BzKSB7XG4gIHJldHVybiBmdW5jdGlvbihzdGF0ZSwgYWN0aW9ucykge1xuICAgIHZhciBsb2NhdGlvbiA9IHN0YXRlLmxvY2F0aW9uXG4gICAgdmFyIG1hdGNoID0gcGFyc2VSb3V0ZShwcm9wcy5wYXRoLCBsb2NhdGlvbi5wYXRobmFtZSwge1xuICAgICAgZXhhY3Q6ICFwcm9wcy5wYXJlbnRcbiAgICB9KVxuXG4gICAgcmV0dXJuIChcbiAgICAgIG1hdGNoICYmXG4gICAgICBwcm9wcy5yZW5kZXIoe1xuICAgICAgICBtYXRjaDogbWF0Y2gsXG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgfSlcbiAgICApXG4gIH1cbn1cbiIsImV4cG9ydCBmdW5jdGlvbiBTd2l0Y2gocHJvcHMsIGNoaWxkcmVuKSB7XG4gIHJldHVybiBmdW5jdGlvbihzdGF0ZSwgYWN0aW9ucykge1xuICAgIHZhciBjaGlsZCxcbiAgICAgIGkgPSAwXG4gICAgd2hpbGUgKFxuICAgICAgIShjaGlsZCA9IGNoaWxkcmVuW2ldICYmIGNoaWxkcmVuW2ldKHN0YXRlLCBhY3Rpb25zKSkgJiZcbiAgICAgIGkgPCBjaGlsZHJlbi5sZW5ndGhcbiAgICApXG4gICAgICBpKytcbiAgICByZXR1cm4gY2hpbGRcbiAgfVxufVxuIiwiZnVuY3Rpb24gd3JhcEhpc3Rvcnkoa2V5cykge1xuICByZXR1cm4ga2V5cy5yZWR1Y2UoZnVuY3Rpb24obmV4dCwga2V5KSB7XG4gICAgdmFyIGZuID0gaGlzdG9yeVtrZXldXG5cbiAgICBoaXN0b3J5W2tleV0gPSBmdW5jdGlvbihkYXRhLCB0aXRsZSwgdXJsKSB7XG4gICAgICBmbi5jYWxsKHRoaXMsIGRhdGEsIHRpdGxlLCB1cmwpXG4gICAgICBkaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudChcInB1c2hzdGF0ZVwiLCB7IGRldGFpbDogZGF0YSB9KSlcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICBoaXN0b3J5W2tleV0gPSBmblxuICAgICAgbmV4dCAmJiBuZXh0KClcbiAgICB9XG4gIH0sIG51bGwpXG59XG5cbmV4cG9ydCB2YXIgbG9jYXRpb24gPSB7XG4gIHN0YXRlOiB7XG4gICAgcGF0aG5hbWU6IHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZSxcbiAgICBwcmV2aW91czogd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lXG4gIH0sXG4gIGFjdGlvbnM6IHtcbiAgICBnbzogZnVuY3Rpb24ocGF0aG5hbWUpIHtcbiAgICAgIGhpc3RvcnkucHVzaFN0YXRlKG51bGwsIFwiXCIsIHBhdGhuYW1lKVxuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICByZXR1cm4gZGF0YVxuICAgIH1cbiAgfSxcbiAgc3Vic2NyaWJlOiBmdW5jdGlvbihhY3Rpb25zKSB7XG4gICAgZnVuY3Rpb24gaGFuZGxlTG9jYXRpb25DaGFuZ2UoZSkge1xuICAgICAgYWN0aW9ucy5zZXQoe1xuICAgICAgICBwYXRobmFtZTogd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgICBwcmV2aW91czogZS5kZXRhaWxcbiAgICAgICAgICA/ICh3aW5kb3cubG9jYXRpb24ucHJldmlvdXMgPSBlLmRldGFpbClcbiAgICAgICAgICA6IHdpbmRvdy5sb2NhdGlvbi5wcmV2aW91c1xuICAgICAgfSlcbiAgICB9XG5cbiAgICB2YXIgdW53cmFwID0gd3JhcEhpc3RvcnkoW1wicHVzaFN0YXRlXCIsIFwicmVwbGFjZVN0YXRlXCJdKVxuXG4gICAgYWRkRXZlbnRMaXN0ZW5lcihcInB1c2hzdGF0ZVwiLCBoYW5kbGVMb2NhdGlvbkNoYW5nZSlcbiAgICBhZGRFdmVudExpc3RlbmVyKFwicG9wc3RhdGVcIiwgaGFuZGxlTG9jYXRpb25DaGFuZ2UpXG5cbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICByZW1vdmVFdmVudExpc3RlbmVyKFwicHVzaHN0YXRlXCIsIGhhbmRsZUxvY2F0aW9uQ2hhbmdlKVxuICAgICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcihcInBvcHN0YXRlXCIsIGhhbmRsZUxvY2F0aW9uQ2hhbmdlKVxuICAgICAgdW53cmFwKClcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IGxvY2F0aW9uIH0gZnJvbSBcIkBoeXBlcmFwcC9yb3V0ZXJcIlxuXG5cbmV4cG9ydCBjb25zdCBzdGF0ZSA9ICB7XG4gbG9jYXRpb246IGxvY2F0aW9uLnN0YXRlLFxuIG5hbWU6ICcnLFxufVxuXG4iLCJpbXBvcnQgeyBsb2NhdGlvbiB9IGZyb20gXCJAaHlwZXJhcHAvcm91dGVyXCJcblxuXG5leHBvcnQgY29uc3QgYWN0aW9ucyA9IHtcbmxvY2F0aW9uOiBsb2NhdGlvbi5hY3Rpb25zLFxuc2V0TmFtZTogdmFsID0+IHN0YXRlID0+ICh7IG5hbWU6IHN0YXRlLm5hbWUgPSB2YWwgfSksXG59XG4gIiwiaW1wb3J0IHsgaCB9IGZyb20gJ2h5cGVyYXBwJ1xuXG5pbXBvcnQgeyBMaW5rLCBSb3V0ZSwgbG9jYXRpb24sIFN3aXRjaCB9IGZyb20gXCJAaHlwZXJhcHAvcm91dGVyXCJcblxuZXhwb3J0IGNvbnN0IEF1dGggPSAgKCkgPT4gKHN0YXRlLCBhY3Rpb25zKSA9PiBcblxuPGRpdj5cblxuIDxoMT4gTG9naW4gPC9oMT5cblxuIDxici8+XG5cbiAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIHBsYWNlaG9sZGVyPVwiRW1haWwgb3IgVXNlcm5hbWVcIiBjbGFzcz1cImlucHV0XCIgXG4gICAgICAgb25pbnB1dD17ZSA9PiBhY3Rpb25zLnNldE5hbWUoZS50YXJnZXQudmFsdWUpfSAgLz5cbiBcbiAgICAgIDxiciAvPlxuXG4gICAgICA8aW5wdXQgdHlwZT1cInBhc3N3b3JkXCIgcGxhY2Vob2xkZXI9XCJQYXNzd29yZFwiIGNsYXNzPVwiaW5wdXRcIlxuICAgICBcbiAgICAgIC8+XG4gICAgICA8YnIgLz5cblxuICAgICAgICA8TGluayB0bz1cIi9ob21lXCI+IDxkaXYgY2xhc3M9XCJidG5cIj5sb2cgaW48L2Rpdj4gPC9MaW5rPlxuXG48L2Rpdj4iLCJpbXBvcnQgeyBoIH0gZnJvbSAnaHlwZXJhcHAnXG5pbXBvcnQgeyBMaW5rLCBSb3V0ZSwgbG9jYXRpb24sIFN3aXRjaCB9IGZyb20gXCJAaHlwZXJhcHAvcm91dGVyXCJcblxuaW1wb3J0IHsgQXV0aCB9IGZyb20gJy4uLy4uL2NvbXBvbmVudHMvQXV0aCdcblxuXG5leHBvcnQgY29uc3QgQXBwID0gKCkgPT4gKCBzdGF0ZSwgYWN0aW9ucyApID0+XG5cbjxkaXY+XG5cbjxBdXRoIC8+XG5cbjwvZGl2PlxuICIsImltcG9ydCB7IGggfSBmcm9tICdoeXBlcmFwcCdcblxuaW1wb3J0IHsgTGluaywgUm91dGUsIGxvY2F0aW9uLCBTd2l0Y2ggfSBmcm9tIFwiQGh5cGVyYXBwL3JvdXRlclwiXG5cbmV4cG9ydCBjb25zdCBIb21lID0gICgpID0+IChzdGF0ZSwgYWN0aW9ucykgPT5cblxuPGRpdj5cblxuIDxoMT48aT4gd2VsY29tZSwgIHtzdGF0ZS5uYW1lfSA8L2k+PC9oMT5cblxuPGZvcm0+XG48dGV4dGFyZWEgbmFtZT1cIm1lc3NhZ2VcIiByb3dzPVwiMTBcIiBjb2xzPVwiMzBcIiBjbGFzcz1cImZvcm0tZmllbGRfX3RleHRhcmVhXCI+UGxlYXNlIHR5cGUgeW91ciBtZXNzYWdlIGVnIChGVVRNaW5uYSk8L3RleHRhcmVhPlxuPC9mb3JtPlxuICAgICAgICA8TGluayB0bz1cIi9tZXNzYWdlXCI+IDxkaXYgY2xhc3M9XCJidG5cIj5zdWJtaXQ8L2Rpdj4gPC9MaW5rPlxuXG48L2Rpdj4iLCJpbXBvcnQgeyBoIH0gZnJvbSAnaHlwZXJhcHAnXG5cbmltcG9ydCB7IExpbmssIFJvdXRlLCBsb2NhdGlvbiwgU3dpdGNoIH0gZnJvbSBcIkBoeXBlcmFwcC9yb3V0ZXJcIlxuXG5leHBvcnQgY29uc3QgTWVzc2FnZSA9ICAoKSA9PiAoc3RhdGUsIGFjdGlvbnMpID0+XG5cbjxkaXY+XG5cbjxpPjxiPiB5b3VyIE1lc3NhZ2UgaGFzIGJlZW4gc2VudCEgdGhhbmsgeW91PC9iPjwvaT5cblxuPC9kaXY+IiwiaW1wb3J0IHsgaCB9IGZyb20gJ2h5cGVyYXBwJ1xuaW1wb3J0IHsgTGluaywgUm91dGUsbG9jYXRpb24sIFN3aXRjaCB9IGZyb20gXCJAaHlwZXJhcHAvcm91dGVyXCJcblxuXG5pbXBvcnQgeyBBcHAgfSBmcm9tICcuL3ZpZXdzL2NvbnRhaW5lcnMvQXBwJ1xuaW1wb3J0IHsgSG9tZSB9IGZyb20gJy4vY29tcG9uZW50cy9Ib21lJ1xuaW1wb3J0IHsgTWVzc2FnZSB9IGZyb20gJy4vY29tcG9uZW50cy9NZXNzYWdlJ1xuXG5leHBvcnQgY29uc3QgdmlldyA9ICggc3RhdGUsIGFjdGlvbnMgKSA9PiBcblxuPGRpdj5cblxuPFN3aXRjaD4gICAgXG4gICAgPFJvdXRlIHBhdGg9XCIvXCIgcmVuZGVyPXsgQXBwIH0gLz4gICBcbiAgICA8Um91dGUgcGF0aD1cIi9ob21lXCIgcmVuZGVyPXsgSG9tZSB9IC8+IFxuICAgIDxSb3V0ZSBwYXRoPVwiL21lc3NhZ2VcIiByZW5kZXI9eyBNZXNzYWdlIH0gLz4gICAgICAgIFxuICA8L1N3aXRjaD5cblxuPC9kaXY+XG4iLCJpbXBvcnQgeyBoICwgYXBwIH0gZnJvbSAnaHlwZXJhcHAnXG5cbmltcG9ydCB7ICBsb2NhdGlvbiB9IGZyb20gXCJAaHlwZXJhcHAvcm91dGVyXCJcblxuaW1wb3J0IHsgc3RhdGUgfSAgZnJvbSAnLi9zdGF0ZS9zdGF0ZSdcbmltcG9ydCAgeyBhY3Rpb25zIH0gZnJvbSAnLi9hY3Rpb25zL2FjdGlvbnMnXG5pbXBvcnQgeyB2aWV3IH0gICBmcm9tICcuL3JvdXRlcydcblxuXG5pbXBvcnQgICcuL3N0eWxlcy9hcHAuc2NzcydcblxuXG5jb25zdCBtYWluID0gYXBwKHN0YXRlLCBhY3Rpb25zLCB2aWV3LCBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuaHlwZXJhcHAtcm9vdCcpKVxuXG5jb25zdCB1bnN1YnNjcmliZSA9IGxvY2F0aW9uLnN1YnNjcmliZShtYWluLmxvY2F0aW9uKSJdLCJuYW1lcyI6WyJsb2NhdGlvbiIsInN0YXRlIiwiYWN0aW9ucyIsIm5hbWUiLCJ2YWwiLCJBdXRoIiwic2V0TmFtZSIsImUiLCJ0YXJnZXQiLCJ2YWx1ZSIsIkFwcCIsIkhvbWUiLCJNZXNzYWdlIiwidmlldyIsIm1haW4iLCJhcHAiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJ1bnN1YnNjcmliZSIsInN1YnNjcmliZSJdLCJtYXBwaW5ncyI6Ijs7OztBQUFPLFNBQVMsQ0FBQyxDQUFDLElBQUksRUFBRSxVQUFVLEVBQUU7RUFDbEMsSUFBSSxJQUFJLEdBQUcsR0FBRTtFQUNiLElBQUksUUFBUSxHQUFHLEdBQUU7RUFDakIsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDLE9BQU07O0VBRTdCLE9BQU8sTUFBTSxFQUFFLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxFQUFDOztFQUVqRCxPQUFPLElBQUksQ0FBQyxNQUFNLEVBQUU7SUFDbEIsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLEdBQUcsR0FBRTtJQUNyQixJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsR0FBRyxFQUFFO01BQ3BCLEtBQUssTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLElBQUk7UUFDckMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUM7T0FDeEI7S0FDRixNQUFNLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLEtBQUssSUFBSSxJQUFJLElBQUksS0FBSyxLQUFLLEVBQUU7TUFDMUQsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUM7S0FDcEI7R0FDRjs7RUFFRCxPQUFPLE9BQU8sSUFBSSxLQUFLLFVBQVU7TUFDN0IsSUFBSSxDQUFDLFVBQVUsSUFBSSxFQUFFLEVBQUUsUUFBUSxDQUFDO01BQ2hDO1FBQ0UsUUFBUSxFQUFFLElBQUk7UUFDZCxVQUFVLEVBQUUsVUFBVSxJQUFJLEVBQUU7UUFDNUIsUUFBUSxFQUFFLFFBQVE7UUFDbEIsR0FBRyxFQUFFLFVBQVUsSUFBSSxVQUFVLENBQUMsR0FBRztPQUNsQztDQUNOOztBQUVELEFBQU8sU0FBUyxHQUFHLENBQUMsS0FBSyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFO0VBQ25ELElBQUksR0FBRyxHQUFHLEVBQUUsQ0FBQyxJQUFHO0VBQ2hCLElBQUksV0FBVyxHQUFHLENBQUMsU0FBUyxJQUFJLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEtBQUssS0FBSTtFQUM5RCxJQUFJLE9BQU8sR0FBRyxXQUFXLElBQUksY0FBYyxDQUFDLFdBQVcsRUFBQztFQUN4RCxJQUFJLFNBQVMsR0FBRyxHQUFFO0VBQ2xCLElBQUksV0FBVTtFQUNkLElBQUksV0FBVyxHQUFHLEtBQUk7RUFDdEIsSUFBSSxXQUFXLEdBQUcsS0FBSyxDQUFDLEtBQUssRUFBQztFQUM5QixJQUFJLFlBQVksR0FBRyxrQkFBa0IsQ0FBQyxFQUFFLEVBQUUsV0FBVyxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsRUFBQzs7RUFFdEUsY0FBYyxHQUFFOztFQUVoQixPQUFPLFlBQVk7O0VBRW5CLFNBQVMsY0FBYyxDQUFDLE9BQU8sRUFBRTtJQUMvQixPQUFPO01BQ0wsUUFBUSxFQUFFLE9BQU8sQ0FBQyxRQUFRLENBQUMsV0FBVyxFQUFFO01BQ3hDLFVBQVUsRUFBRSxFQUFFO01BQ2QsUUFBUSxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRSxTQUFTLE9BQU8sRUFBRTtRQUN2RCxPQUFPLE9BQU8sQ0FBQyxRQUFRLEtBQUssQ0FBQztZQUN6QixPQUFPLENBQUMsU0FBUztZQUNqQixjQUFjLENBQUMsT0FBTyxDQUFDO09BQzVCLENBQUM7S0FDSDtHQUNGOztFQUVELFNBQVMsV0FBVyxDQUFDLElBQUksRUFBRTtJQUN6QixPQUFPLE9BQU8sSUFBSSxLQUFLLFVBQVU7UUFDN0IsV0FBVyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsWUFBWSxDQUFDLENBQUM7UUFDNUMsSUFBSSxJQUFJLElBQUksR0FBRyxJQUFJLEdBQUcsRUFBRTtHQUM3Qjs7RUFFRCxTQUFTLE1BQU0sR0FBRztJQUNoQixVQUFVLEdBQUcsQ0FBQyxXQUFVOztJQUV4QixJQUFJLElBQUksR0FBRyxXQUFXLENBQUMsSUFBSSxFQUFDOztJQUU1QixJQUFJLFNBQVMsSUFBSSxDQUFDLFVBQVUsRUFBRTtNQUM1QixXQUFXLEdBQUcsS0FBSyxDQUFDLFNBQVMsRUFBRSxXQUFXLEVBQUUsT0FBTyxHQUFHLE9BQU8sR0FBRyxJQUFJLEdBQUU7S0FDdkU7O0lBRUQsV0FBVyxHQUFHLE1BQUs7O0lBRW5CLE9BQU8sU0FBUyxDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsR0FBRyxFQUFFLEdBQUU7R0FDM0M7O0VBRUQsU0FBUyxjQUFjLEdBQUc7SUFDeEIsSUFBSSxDQUFDLFVBQVUsRUFBRTtNQUNmLFVBQVUsR0FBRyxLQUFJO01BQ2pCLFVBQVUsQ0FBQyxNQUFNLEVBQUM7S0FDbkI7R0FDRjs7RUFFRCxTQUFTLEtBQUssQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFO0lBQzdCLElBQUksR0FBRyxHQUFHLEdBQUU7O0lBRVosS0FBSyxJQUFJLENBQUMsSUFBSSxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLEVBQUM7SUFDeEMsS0FBSyxJQUFJLENBQUMsSUFBSSxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLEVBQUM7O0lBRXhDLE9BQU8sR0FBRztHQUNYOztFQUVELFNBQVMsR0FBRyxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFO0lBQ2hDLElBQUksTUFBTSxHQUFHLEdBQUU7SUFDZixJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7TUFDZixNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2IsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQUs7TUFDdEUsT0FBTyxLQUFLLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQztLQUM3QjtJQUNELE9BQU8sS0FBSztHQUNiOztFQUVELFNBQVMsR0FBRyxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUU7SUFDekIsSUFBSSxDQUFDLEdBQUcsRUFBQztJQUNULE9BQU8sQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUU7TUFDdEIsTUFBTSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBQztLQUMzQjtJQUNELE9BQU8sTUFBTTtHQUNkOztFQUVELFNBQVMsa0JBQWtCLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUU7SUFDaEQsS0FBSyxJQUFJLEdBQUcsSUFBSSxPQUFPLEVBQUU7TUFDdkIsT0FBTyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssVUFBVTtVQUM5QixDQUFDLFNBQVMsR0FBRyxFQUFFLE1BQU0sRUFBRTtZQUNyQixPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsU0FBUyxJQUFJLEVBQUU7Y0FDNUIsSUFBSSxNQUFNLEdBQUcsTUFBTSxDQUFDLElBQUksRUFBQzs7Y0FFekIsSUFBSSxPQUFPLE1BQU0sS0FBSyxVQUFVLEVBQUU7Z0JBQ2hDLE1BQU0sR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxXQUFXLENBQUMsRUFBRSxPQUFPLEVBQUM7ZUFDakQ7O2NBRUQ7Z0JBQ0UsTUFBTTtnQkFDTixNQUFNLE1BQU0sS0FBSyxHQUFHLEdBQUcsQ0FBQyxJQUFJLEVBQUUsV0FBVyxDQUFDLENBQUM7Z0JBQzNDLENBQUMsTUFBTSxDQUFDLElBQUk7Z0JBQ1o7Z0JBQ0EsY0FBYzttQkFDWCxXQUFXLEdBQUcsR0FBRyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxFQUFFLFdBQVcsQ0FBQztrQkFDNUQ7ZUFDRjs7Y0FFRCxPQUFPLE1BQU07Y0FDZDtXQUNGLEVBQUUsR0FBRyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztVQUNyQixrQkFBa0I7WUFDaEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUM7YUFDZixLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQzthQUM5QixPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNwQztLQUNOOztJQUVELE9BQU8sT0FBTztHQUNmOztFQUVELFNBQVMsTUFBTSxDQUFDLElBQUksRUFBRTtJQUNwQixPQUFPLElBQUksR0FBRyxJQUFJLENBQUMsR0FBRyxHQUFHLElBQUk7R0FDOUI7O0VBRUQsU0FBUyxhQUFhLENBQUMsS0FBSyxFQUFFO0lBQzVCLE9BQU8sS0FBSyxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQztHQUNyRDs7RUFFRCxTQUFTLGVBQWUsQ0FBQyxPQUFPLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFO0lBQzlELElBQUksSUFBSSxLQUFLLEtBQUssRUFBRTtLQUNuQixNQUFNLElBQUksSUFBSSxLQUFLLE9BQU8sRUFBRTtNQUMzQixLQUFLLElBQUksQ0FBQyxJQUFJLEtBQUssQ0FBQyxRQUFRLEVBQUUsS0FBSyxDQUFDLEVBQUU7UUFDcEMsSUFBSSxLQUFLLEdBQUcsS0FBSyxJQUFJLElBQUksSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxHQUFHLEVBQUUsR0FBRyxLQUFLLENBQUMsQ0FBQyxFQUFDO1FBQzdELElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsRUFBRTtVQUNoQixPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUM7U0FDcEMsTUFBTTtVQUNMLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFLO1NBQ3pCO09BQ0Y7S0FDRixNQUFNO01BQ0wsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLEVBQUU7UUFDdEMsSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFDOztRQUVwQixJQUFJLE9BQU8sQ0FBQyxNQUFNLEVBQUU7VUFDbEIsSUFBSSxDQUFDLFFBQVEsRUFBRSxRQUFRLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUM7U0FDL0MsTUFBTTtVQUNMLE9BQU8sQ0FBQyxNQUFNLEdBQUcsR0FBRTtTQUNwQjs7UUFFRCxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLE1BQUs7O1FBRTVCLElBQUksS0FBSyxFQUFFO1VBQ1QsSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNiLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsYUFBYSxFQUFDO1dBQzlDO1NBQ0YsTUFBTTtVQUNMLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLEVBQUUsYUFBYSxFQUFDO1NBQ2pEO09BQ0YsTUFBTSxJQUFJLElBQUksSUFBSSxPQUFPLElBQUksSUFBSSxLQUFLLE1BQU0sSUFBSSxDQUFDLEtBQUssRUFBRTtRQUN2RCxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSyxJQUFJLElBQUksR0FBRyxFQUFFLEdBQUcsTUFBSztPQUMzQyxNQUFNLElBQUksS0FBSyxJQUFJLElBQUksSUFBSSxLQUFLLEtBQUssS0FBSyxFQUFFO1FBQzNDLE9BQU8sQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBQztPQUNsQzs7TUFFRCxJQUFJLEtBQUssSUFBSSxJQUFJLElBQUksS0FBSyxLQUFLLEtBQUssRUFBRTtRQUNwQyxPQUFPLENBQUMsZUFBZSxDQUFDLElBQUksRUFBQztPQUM5QjtLQUNGO0dBQ0Y7O0VBRUQsU0FBUyxhQUFhLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRTtJQUNsQyxJQUFJLE9BQU87TUFDVCxPQUFPLElBQUksS0FBSyxRQUFRLElBQUksT0FBTyxJQUFJLEtBQUssUUFBUTtVQUNoRCxRQUFRLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQztVQUM3QixDQUFDLEtBQUssR0FBRyxLQUFLLElBQUksSUFBSSxDQUFDLFFBQVEsS0FBSyxLQUFLO1lBQ3ZDLFFBQVEsQ0FBQyxlQUFlO2NBQ3RCLDRCQUE0QjtjQUM1QixJQUFJLENBQUMsUUFBUTthQUNkO1lBQ0QsUUFBUSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFDOztJQUU3QyxJQUFJLFVBQVUsR0FBRyxJQUFJLENBQUMsV0FBVTtJQUNoQyxJQUFJLFVBQVUsRUFBRTtNQUNkLElBQUksVUFBVSxDQUFDLFFBQVEsRUFBRTtRQUN2QixTQUFTLENBQUMsSUFBSSxDQUFDLFdBQVc7VUFDeEIsVUFBVSxDQUFDLFFBQVEsQ0FBQyxPQUFPLEVBQUM7U0FDN0IsRUFBQztPQUNIOztNQUVELEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUM3QyxPQUFPLENBQUMsV0FBVztVQUNqQixhQUFhO2FBQ1YsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxXQUFXLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNqRCxLQUFLO1dBQ047VUFDRjtPQUNGOztNQUVELEtBQUssSUFBSSxJQUFJLElBQUksVUFBVSxFQUFFO1FBQzNCLGVBQWUsQ0FBQyxPQUFPLEVBQUUsSUFBSSxFQUFFLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFDO09BQzlEO0tBQ0Y7O0lBRUQsT0FBTyxPQUFPO0dBQ2Y7O0VBRUQsU0FBUyxhQUFhLENBQUMsT0FBTyxFQUFFLGFBQWEsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFO0lBQ2hFLEtBQUssSUFBSSxJQUFJLElBQUksS0FBSyxDQUFDLGFBQWEsRUFBRSxVQUFVLENBQUMsRUFBRTtNQUNqRDtRQUNFLFVBQVUsQ0FBQyxJQUFJLENBQUM7U0FDZixJQUFJLEtBQUssT0FBTyxJQUFJLElBQUksS0FBSyxTQUFTO1lBQ25DLE9BQU8sQ0FBQyxJQUFJLENBQUM7WUFDYixhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDeEI7UUFDQSxlQUFlO1VBQ2IsT0FBTztVQUNQLElBQUk7VUFDSixVQUFVLENBQUMsSUFBSSxDQUFDO1VBQ2hCLGFBQWEsQ0FBQyxJQUFJLENBQUM7VUFDbkIsS0FBSztVQUNOO09BQ0Y7S0FDRjs7SUFFRCxJQUFJLEVBQUUsR0FBRyxXQUFXLEdBQUcsVUFBVSxDQUFDLFFBQVEsR0FBRyxVQUFVLENBQUMsU0FBUTtJQUNoRSxJQUFJLEVBQUUsRUFBRTtNQUNOLFNBQVMsQ0FBQyxJQUFJLENBQUMsV0FBVztRQUN4QixFQUFFLENBQUMsT0FBTyxFQUFFLGFBQWEsRUFBQztPQUMzQixFQUFDO0tBQ0g7R0FDRjs7RUFFRCxTQUFTLGNBQWMsQ0FBQyxPQUFPLEVBQUUsSUFBSSxFQUFFO0lBQ3JDLElBQUksVUFBVSxHQUFHLElBQUksQ0FBQyxXQUFVO0lBQ2hDLElBQUksVUFBVSxFQUFFO01BQ2QsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQzdDLGNBQWMsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUM7T0FDeEQ7O01BRUQsSUFBSSxVQUFVLENBQUMsU0FBUyxFQUFFO1FBQ3hCLFVBQVUsQ0FBQyxTQUFTLENBQUMsT0FBTyxFQUFDO09BQzlCO0tBQ0Y7SUFDRCxPQUFPLE9BQU87R0FDZjs7RUFFRCxTQUFTLGFBQWEsQ0FBQyxNQUFNLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRTtJQUM1QyxTQUFTLElBQUksR0FBRztNQUNkLE1BQU0sQ0FBQyxXQUFXLENBQUMsY0FBYyxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsRUFBQztLQUNsRDs7SUFFRCxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsVUFBVSxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUTtJQUNwRCxJQUFJLEVBQUUsRUFBRTtNQUNOLEVBQUUsQ0FBQyxPQUFPLEVBQUUsSUFBSSxFQUFDO0tBQ2xCLE1BQU07TUFDTCxJQUFJLEdBQUU7S0FDUDtHQUNGOztFQUVELFNBQVMsS0FBSyxDQUFDLE1BQU0sRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUU7SUFDcEQsSUFBSSxJQUFJLEtBQUssT0FBTyxFQUFFO0tBQ3JCLE1BQU0sSUFBSSxPQUFPLElBQUksSUFBSSxJQUFJLE9BQU8sQ0FBQyxRQUFRLEtBQUssSUFBSSxDQUFDLFFBQVEsRUFBRTtNQUNoRSxJQUFJLFVBQVUsR0FBRyxhQUFhLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBQztNQUMzQyxNQUFNLENBQUMsWUFBWSxDQUFDLFVBQVUsRUFBRSxPQUFPLEVBQUM7O01BRXhDLElBQUksT0FBTyxJQUFJLElBQUksRUFBRTtRQUNuQixhQUFhLENBQUMsTUFBTSxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUM7T0FDeEM7O01BRUQsT0FBTyxHQUFHLFdBQVU7S0FDckIsTUFBTSxJQUFJLE9BQU8sQ0FBQyxRQUFRLElBQUksSUFBSSxFQUFFO01BQ25DLE9BQU8sQ0FBQyxTQUFTLEdBQUcsS0FBSTtLQUN6QixNQUFNO01BQ0wsYUFBYTtRQUNYLE9BQU87UUFDUCxPQUFPLENBQUMsVUFBVTtRQUNsQixJQUFJLENBQUMsVUFBVTtTQUNkLEtBQUssR0FBRyxLQUFLLElBQUksSUFBSSxDQUFDLFFBQVEsS0FBSyxLQUFLO1FBQzFDOztNQUVELElBQUksUUFBUSxHQUFHLEdBQUU7TUFDakIsSUFBSSxRQUFRLEdBQUcsR0FBRTtNQUNqQixJQUFJLFdBQVcsR0FBRyxHQUFFO01BQ3BCLElBQUksV0FBVyxHQUFHLE9BQU8sQ0FBQyxTQUFRO01BQ2xDLElBQUksUUFBUSxHQUFHLElBQUksQ0FBQyxTQUFROztNQUU1QixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsV0FBVyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUMzQyxXQUFXLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDLEVBQUM7O1FBRXRDLElBQUksTUFBTSxHQUFHLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLEVBQUM7UUFDbkMsSUFBSSxNQUFNLElBQUksSUFBSSxFQUFFO1VBQ2xCLFFBQVEsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsRUFBRSxXQUFXLENBQUMsQ0FBQyxDQUFDLEVBQUM7U0FDcEQ7T0FDRjs7TUFFRCxJQUFJLENBQUMsR0FBRyxFQUFDO01BQ1QsSUFBSSxDQUFDLEdBQUcsRUFBQzs7TUFFVCxPQUFPLENBQUMsR0FBRyxRQUFRLENBQUMsTUFBTSxFQUFFO1FBQzFCLElBQUksTUFBTSxHQUFHLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLEVBQUM7UUFDbkMsSUFBSSxNQUFNLEdBQUcsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUU7O1FBRTdELElBQUksUUFBUSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1VBQ3BCLENBQUMsR0FBRTtVQUNILFFBQVE7U0FDVDs7UUFFRCxJQUFJLE1BQU0sSUFBSSxJQUFJLElBQUksV0FBVyxFQUFFO1VBQ2pDLElBQUksTUFBTSxJQUFJLElBQUksRUFBRTtZQUNsQixLQUFLLENBQUMsT0FBTyxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUMsRUFBRSxXQUFXLENBQUMsQ0FBQyxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBQztZQUNsRSxDQUFDLEdBQUU7V0FDSjtVQUNELENBQUMsR0FBRTtTQUNKLE1BQU07VUFDTCxJQUFJLFNBQVMsR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksR0FBRTs7VUFFdEMsSUFBSSxNQUFNLEtBQUssTUFBTSxFQUFFO1lBQ3JCLEtBQUssQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFDO1lBQzlELENBQUMsR0FBRTtXQUNKLE1BQU0sSUFBSSxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDdkIsS0FBSztjQUNILE9BQU87Y0FDUCxPQUFPLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUM7Y0FDbEQsU0FBUyxDQUFDLENBQUMsQ0FBQztjQUNaLFFBQVEsQ0FBQyxDQUFDLENBQUM7Y0FDWCxLQUFLO2NBQ047V0FDRixNQUFNO1lBQ0wsS0FBSyxDQUFDLE9BQU8sRUFBRSxXQUFXLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUM7V0FDekQ7O1VBRUQsUUFBUSxDQUFDLE1BQU0sQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDLEVBQUM7VUFDOUIsQ0FBQyxHQUFFO1NBQ0o7T0FDRjs7TUFFRCxPQUFPLENBQUMsR0FBRyxXQUFXLENBQUMsTUFBTSxFQUFFO1FBQzdCLElBQUksTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksRUFBRTtVQUNsQyxhQUFhLENBQUMsT0FBTyxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUMsRUFBRSxXQUFXLENBQUMsQ0FBQyxDQUFDLEVBQUM7U0FDdkQ7UUFDRCxDQUFDLEdBQUU7T0FDSjs7TUFFRCxLQUFLLElBQUksQ0FBQyxJQUFJLFFBQVEsRUFBRTtRQUN0QixJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFO1VBQ2hCLGFBQWEsQ0FBQyxPQUFPLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQztTQUN2RDtPQUNGO0tBQ0Y7SUFDRCxPQUFPLE9BQU87R0FDZjtDQUNGOztBQ25YRCxTQUFTLFNBQVMsQ0FBQyxHQUFHLEVBQUU7RUFDdEIsT0FBTyxHQUFHLENBQUMsUUFBUSxHQUFHLElBQUksR0FBRyxHQUFHLENBQUMsUUFBUSxJQUFJLEdBQUcsQ0FBQyxJQUFJLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDO0NBQzdFOztBQUVELFNBQVMsVUFBVSxDQUFDLGFBQWEsRUFBRTs7O0VBR2pDLE9BQU8sU0FBUyxDQUFDLFFBQVEsQ0FBQyxLQUFLLFNBQVMsQ0FBQyxhQUFhLENBQUM7Q0FDeEQ7O0FBRUQsQUFBTyxTQUFTLElBQUksQ0FBQyxLQUFLLEVBQUUsUUFBUSxFQUFFO0VBQ3BDLE9BQU8sU0FBUyxLQUFLLEVBQUUsT0FBTyxFQUFFO0lBQzlCLElBQUksRUFBRSxHQUFHLEtBQUssQ0FBQyxHQUFFO0lBQ2pCLElBQUksUUFBUSxHQUFHLEtBQUssQ0FBQyxTQUFRO0lBQzdCLElBQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxRQUFPO0lBQzNCLE9BQU8sS0FBSyxDQUFDLEdBQUU7SUFDZixPQUFPLEtBQUssQ0FBQyxTQUFROztJQUVyQixLQUFLLENBQUMsSUFBSSxHQUFHLEdBQUU7SUFDZixLQUFLLENBQUMsT0FBTyxHQUFHLFNBQVMsQ0FBQyxFQUFFO01BQzFCLElBQUksT0FBTyxFQUFFO1FBQ1gsT0FBTyxDQUFDLENBQUMsRUFBQztPQUNYO01BQ0Q7UUFDRSxDQUFDLENBQUMsZ0JBQWdCO1FBQ2xCLENBQUMsQ0FBQyxNQUFNLEtBQUssQ0FBQztRQUNkLENBQUMsQ0FBQyxNQUFNO1FBQ1IsQ0FBQyxDQUFDLE9BQU87UUFDVCxDQUFDLENBQUMsT0FBTztRQUNULENBQUMsQ0FBQyxRQUFRO1FBQ1YsS0FBSyxDQUFDLE1BQU0sS0FBSyxRQUFRO1FBQ3pCLFVBQVUsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDO1FBQzNCO09BQ0QsTUFBTTtRQUNMLENBQUMsQ0FBQyxjQUFjLEdBQUU7O1FBRWxCLElBQUksRUFBRSxLQUFLLFFBQVEsQ0FBQyxRQUFRLEVBQUU7VUFDNUIsT0FBTyxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUM7U0FDN0M7T0FDRjtNQUNGOztJQUVELE9BQU8sQ0FBQyxDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsUUFBUSxDQUFDO0dBQy9CO0NBQ0Y7O0FDOUNELFNBQVMsV0FBVyxDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRTtFQUMvQyxPQUFPO0lBQ0wsT0FBTyxFQUFFLE9BQU87SUFDaEIsSUFBSSxFQUFFLElBQUk7SUFDVixHQUFHLEVBQUUsR0FBRztJQUNSLE1BQU0sRUFBRSxNQUFNO0dBQ2Y7Q0FDRjs7QUFFRCxTQUFTLGlCQUFpQixDQUFDLEdBQUcsRUFBRTtFQUM5QixLQUFLLElBQUksR0FBRyxHQUFHLEdBQUcsQ0FBQyxNQUFNLEVBQUUsR0FBRyxLQUFLLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxHQUFHLENBQUM7RUFDakQsT0FBTyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxDQUFDO0NBQzdCOztBQUVELFNBQVMsV0FBVyxDQUFDLEdBQUcsRUFBRTtFQUN4QixJQUFJO0lBQ0YsT0FBTyxrQkFBa0IsQ0FBQyxHQUFHLENBQUM7R0FDL0IsQ0FBQyxPQUFPLENBQUMsRUFBRTtJQUNWLE9BQU8sR0FBRztHQUNYO0NBQ0Y7O0FBRUQsQUFBTyxTQUFTLFVBQVUsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLE9BQU8sRUFBRTtFQUM3QyxJQUFJLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxJQUFJLEVBQUU7SUFDekIsT0FBTyxXQUFXLENBQUMsSUFBSSxLQUFLLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxDQUFDO0dBQzVDOztFQUVELElBQUksS0FBSyxHQUFHLE9BQU8sSUFBSSxPQUFPLENBQUMsTUFBSztFQUNwQyxJQUFJLEtBQUssR0FBRyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFDO0VBQzlDLElBQUksSUFBSSxHQUFHLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUM7O0VBRTVDLElBQUksS0FBSyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxLQUFLLEtBQUssSUFBSSxLQUFLLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRTtJQUN2RSxNQUFNO0dBQ1A7O0VBRUQsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsTUFBTSxHQUFHLEVBQUUsRUFBRSxHQUFHLEdBQUcsS0FBSyxDQUFDLE1BQU0sRUFBRSxHQUFHLEdBQUcsRUFBRSxFQUFFLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxFQUFFLEVBQUU7SUFDdkUsSUFBSSxHQUFHLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO01BQ3ZCLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUM7S0FDM0QsTUFBTSxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUU7TUFDL0IsTUFBTTtLQUNQO0lBQ0QsR0FBRyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFHO0dBQ3JCOztFQUVELE9BQU8sV0FBVyxDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUM7Q0FDMUQ7O0FDM0NNLFNBQVMsS0FBSyxDQUFDLEtBQUssRUFBRTtFQUMzQixPQUFPLFNBQVMsS0FBSyxFQUFFLE9BQU8sRUFBRTtJQUM5QixJQUFJLFFBQVEsR0FBRyxLQUFLLENBQUMsU0FBUTtJQUM3QixJQUFJLEtBQUssR0FBRyxVQUFVLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsUUFBUSxFQUFFO01BQ3BELEtBQUssRUFBRSxDQUFDLEtBQUssQ0FBQyxNQUFNO0tBQ3JCLEVBQUM7O0lBRUY7TUFDRSxLQUFLO01BQ0wsS0FBSyxDQUFDLE1BQU0sQ0FBQztRQUNYLEtBQUssRUFBRSxLQUFLO1FBQ1osUUFBUSxFQUFFLFFBQVE7T0FDbkIsQ0FBQztLQUNIO0dBQ0Y7Q0FDRjs7QUNqQk0sU0FBUyxNQUFNLENBQUMsS0FBSyxFQUFFLFFBQVEsRUFBRTtFQUN0QyxPQUFPLFNBQVMsS0FBSyxFQUFFLE9BQU8sRUFBRTtJQUM5QixJQUFJLEtBQUs7TUFDUCxDQUFDLEdBQUcsRUFBQztJQUNQO01BQ0UsRUFBRSxLQUFLLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxJQUFJLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUM7TUFDckQsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxNQUFNOztNQUVuQixDQUFDLEdBQUU7SUFDTCxPQUFPLEtBQUs7R0FDYjtDQUNGOztBQ1hELFNBQVMsV0FBVyxDQUFDLElBQUksRUFBRTtFQUN6QixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxJQUFJLEVBQUUsR0FBRyxFQUFFO0lBQ3JDLElBQUksRUFBRSxHQUFHLE9BQU8sQ0FBQyxHQUFHLEVBQUM7O0lBRXJCLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxTQUFTLElBQUksRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFO01BQ3hDLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFDO01BQy9CLGFBQWEsQ0FBQyxJQUFJLFdBQVcsQ0FBQyxXQUFXLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBQztNQUM5RDs7SUFFRCxPQUFPLFdBQVc7TUFDaEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUU7TUFDakIsSUFBSSxJQUFJLElBQUksR0FBRTtLQUNmO0dBQ0YsRUFBRSxJQUFJLENBQUM7Q0FDVDs7QUFFRCxBQUFPLElBQUlBLFVBQVEsR0FBRztFQUNwQixLQUFLLEVBQUU7SUFDTCxRQUFRLEVBQUUsTUFBTSxDQUFDLFFBQVEsQ0FBQyxRQUFRO0lBQ2xDLFFBQVEsRUFBRSxNQUFNLENBQUMsUUFBUSxDQUFDLFFBQVE7R0FDbkM7RUFDRCxPQUFPLEVBQUU7SUFDUCxFQUFFLEVBQUUsU0FBUyxRQUFRLEVBQUU7TUFDckIsT0FBTyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFFLFFBQVEsRUFBQztLQUN0QztJQUNELEdBQUcsRUFBRSxTQUFTLElBQUksRUFBRTtNQUNsQixPQUFPLElBQUk7S0FDWjtHQUNGO0VBQ0QsU0FBUyxFQUFFLFNBQVMsT0FBTyxFQUFFO0lBQzNCLFNBQVMsb0JBQW9CLENBQUMsQ0FBQyxFQUFFO01BQy9CLE9BQU8sQ0FBQyxHQUFHLENBQUM7UUFDVixRQUFRLEVBQUUsTUFBTSxDQUFDLFFBQVEsQ0FBQyxRQUFRO1FBQ2xDLFFBQVEsRUFBRSxDQUFDLENBQUMsTUFBTTthQUNiLE1BQU0sQ0FBQyxRQUFRLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQyxNQUFNO1lBQ3BDLE1BQU0sQ0FBQyxRQUFRLENBQUMsUUFBUTtPQUM3QixFQUFDO0tBQ0g7O0lBRUQsSUFBSSxNQUFNLEdBQUcsV0FBVyxDQUFDLENBQUMsV0FBVyxFQUFFLGNBQWMsQ0FBQyxFQUFDOztJQUV2RCxnQkFBZ0IsQ0FBQyxXQUFXLEVBQUUsb0JBQW9CLEVBQUM7SUFDbkQsZ0JBQWdCLENBQUMsVUFBVSxFQUFFLG9CQUFvQixFQUFDOztJQUVsRCxPQUFPLFdBQVc7TUFDaEIsbUJBQW1CLENBQUMsV0FBVyxFQUFFLG9CQUFvQixFQUFDO01BQ3RELG1CQUFtQixDQUFDLFVBQVUsRUFBRSxvQkFBb0IsRUFBQztNQUNyRCxNQUFNLEdBQUU7S0FDVDtHQUNGO0NBQ0Y7O0FDL0NNLElBQU1DLFFBQVM7WUFDWEQsV0FBU0MsS0FERTtRQUVmO0NBRkE7O0FDQUEsSUFBTUMsVUFBVTtZQUNiRixXQUFTRSxPQURJO1dBRWQ7V0FBTzthQUFVLEVBQUVDLE1BQU1GLE1BQU1FLElBQU4sR0FBYUMsR0FBckIsRUFBVjtLQUFQOztDQUZGOztBQ0NBLElBQU1DLE9BQVEsU0FBUkEsSUFBUTtTQUFNLFVBQUNKLEtBQUQsRUFBUUMsT0FBUjtXQUUzQjs7Ozs7OztPQUFBO21CQUFBO21CQU1hLE1BQUssTUFBWixFQUFtQixhQUFZLG1CQUEvQixFQUFtRCxTQUFNLE9BQXpEO2lCQUNVO2lCQUFLQSxRQUFRSSxPQUFSLENBQWdCQyxFQUFFQyxNQUFGLENBQVNDLEtBQXpCLENBQUw7U0FEVixHQU5OO21CQUFBO21CQVdhLE1BQUssVUFBWixFQUF1QixhQUFZLFVBQW5DLEVBQThDLFNBQU07O1FBWDFEO21CQUFBOztZQWdCUTtVQUFNLElBQUcsT0FBVDs7OztZQUF1QixTQUFNLEtBQVg7O1NBQWxCOzs7S0FsQm1CO0dBQU47Q0FBZDs7QUNFQSxJQUFNQyxNQUFNLFNBQU5BLEdBQU07U0FBTSxVQUFFVCxLQUFGLEVBQVNDLE9BQVQ7V0FFekI7OztRQUVDLElBQUQ7S0FKeUI7R0FBTjtDQUFaOztBQ0ZBLElBQU1TLE9BQVEsU0FBUkEsSUFBUTtTQUFNLFVBQUNWLEtBQUQsRUFBUUMsT0FBUjtXQUUzQjs7Ozs7Ozs7OztnQkFFMEJDLElBQXJCOzs7T0FGTDs7Ozs7O1lBS1UsTUFBSyxTQUFmLEVBQXlCLE1BQUssSUFBOUIsRUFBbUMsTUFBSyxJQUF4QyxFQUE2QyxTQUFNLHNCQUFuRDs7O09BTEE7O1lBT1E7VUFBTSxJQUFHLFVBQVQ7Ozs7WUFBMEIsU0FBTSxLQUFYOztTQUFyQjs7O0tBVG1CO0dBQU47Q0FBZDs7QUNBQSxJQUFNUyxVQUFXLFNBQVhBLE9BQVc7U0FBTSxVQUFDWCxLQUFELEVBQVFDLE9BQVI7V0FFOUI7Ozs7Ozs7Ozs7OztLQUY4QjtHQUFOO0NBQWpCOztBQ0lBLElBQU1XLE9BQU8sU0FBUEEsSUFBTyxDQUFFWixLQUFGLEVBQVNDLE9BQVQ7V0FFcEI7Ozs7a0JBRUE7O2NBQ0ssS0FBRCxJQUFPLE1BQUssR0FBWixFQUFnQixRQUFTUSxHQUF6QixHQURKO2NBRUssS0FBRCxJQUFPLE1BQUssT0FBWixFQUFvQixRQUFTQyxJQUE3QixHQUZKO2NBR0ssS0FBRCxJQUFPLE1BQUssVUFBWixFQUF1QixRQUFTQyxPQUFoQzs7S0FQZ0I7Q0FBYjs7QUNJUCxJQUFNRSxPQUFPQyxJQUFJZCxLQUFKLEVBQVdDLE9BQVgsRUFBb0JXLElBQXBCLEVBQTBCRyxTQUFTQyxhQUFULENBQXVCLGdCQUF2QixDQUExQixDQUFiOztBQUVBLElBQU1DLGNBQWNsQixXQUFTbUIsU0FBVCxDQUFtQkwsS0FBS2QsUUFBeEIsQ0FBcEI7Ozs7In0=
